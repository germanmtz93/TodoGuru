name: TodoGuru CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Stage 1: Code Quality & Linting
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy

      - name: Check code formatting with Black
        run: |
          black --check --diff todo_cli/ tests/

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff todo_cli/ tests/

      - name: Lint with flake8
        run: |
          flake8 todo_cli/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Type checking with mypy
        run: |
          mypy todo_cli/ --ignore-missing-imports

  # Stage 2: Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit security scan
        run: |
          pip install bandit
          bandit -r todo_cli/ -f json -o bandit-report.json || true

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json

      - name: Run Safety check
        run: |
          pip install safety
          safety check --json --output safety-report.json || true

      - name: Upload Safety results
        uses: actions/upload-artifact@v4
        with:
          name: safety-vulnerability-report
          path: safety-report.json

  # Stage 3: Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-cov

      - name: Run tests with coverage
        run: |
          pytest tests/ --cov=todo_cli --cov-report=xml --cov-report=html --cov-report=term-missing

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Stage 4: Build and Package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-scan, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Check package quality
        run: |
          twine check dist/*

  # Stage 5: Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install package
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Run integration tests
        run: |
          # Test CLI functionality
          python -m todo_cli.main add "Test task from CI"
          python -m todo_cli.main list
          python -m todo_cli.main done 1
          python -m todo_cli.main stats

      - name: Test error handling
        run: |
          # Test invalid inputs
          python -m todo_cli.main add "" || true
          python -m todo_cli.main done 999 || true

  # Stage 6: Performance Testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest-benchmark

      - name: Run performance benchmarks
        run: |
          python -c "
          import time
          from todo_cli.task_manager import TaskManager
          import tempfile
          import os
          
          # Create temporary file for testing
          temp_file = tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.json')
          temp_file.write('[]')
          temp_file.close()
          
          tm = TaskManager(temp_file.name)
          
          # Benchmark adding tasks
          start_time = time.time()
          for i in range(1000):
              tm.add_task(f'Task {i}')
          add_time = time.time() - start_time
          
          # Benchmark listing tasks
          start_time = time.time()
          for _ in range(100):
              tm.list_tasks()
          list_time = time.time() - start_time
          
          print(f'Adding 1000 tasks: {add_time:.4f} seconds')
          print(f'Listing tasks 100 times: {list_time:.4f} seconds')
          
          # Cleanup
          os.unlink(temp_file.name)
          "

  # Stage 7: Documentation
  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install documentation tools
        run: |
          python -m pip install --upgrade pip
          pip install pydocstyle

      - name: Check docstring style
        run: |
          pydocstyle todo_cli/ --convention=google

      - name: Generate documentation
        run: |
          python -c "
          import pydoc
          import todo_cli.task_manager
          import todo_cli.main
          
          # Generate module documentation
          with open('module_docs.txt', 'w') as f:
              f.write(pydoc.render_doc(todo_cli.task_manager))
              f.write(pydoc.render_doc(todo_cli.main))
          "

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: module_docs.txt

  # Stage 8: Release (Manual trigger)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, integration-test, performance-test, documentation]
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## TodoGuru CLI v${{ github.run_number }}
            
            ### Changes
            - Automated release from CI/CD pipeline
            - All tests passing
            - Security scans completed
            - Performance benchmarks included
            
            ### Installation
            ```bash
            pip install dist/*.whl
            ```
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/*.whl
          asset_name: todoguru-${{ github.run_number }}-py3-none-any.whl
          asset_content_type: application/octet-stream

  # Stage 9: Notifications
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-scan, test, build, integration-test, performance-test, documentation]
    if: always()
    steps:
      - name: Check pipeline status
        id: check_status
        run: |
          if [[ "${{ needs.lint-and-format.result }}" == "success" && 
                "${{ needs.security-scan.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" && 
                "${{ needs.integration-test.result }}" == "success" && 
                "${{ needs.performance-test.result }}" == "success" && 
                "${{ needs.documentation.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=🎉 All pipeline stages completed successfully!" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Pipeline failed. Check the logs for details." >> $GITHUB_OUTPUT
          fi

      - name: Pipeline Summary
        run: |
          echo "## Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Format | ${{ needs.lint-and-format.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation | ${{ needs.documentation.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.check_status.outputs.message }}" >> $GITHUB_STEP_SUMMARY 